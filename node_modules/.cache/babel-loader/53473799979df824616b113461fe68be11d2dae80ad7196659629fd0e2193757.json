{"ast":null,"code":"var _jsxFileName = \"D:\\\\Portfolio Website\\\\portfolio\\\\src\\\\context\\\\ThemeContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext(undefined);\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s();\n  useEffect(() => {\n    // Always set dark mode\n    document.documentElement.classList.add('dark');\n\n    // Update meta theme-color\n    const metaThemeColor = document.querySelector('meta[name=\"theme-color\"]');\n    if (metaThemeColor) {\n      metaThemeColor.setAttribute('content', '#1f2937');\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      isDarkMode: true\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n_s(ThemeProvider, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = ThemeProvider;\nexport const useTheme = () => {\n  _s2();\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n_s2(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","jsxDEV","_jsxDEV","ThemeContext","undefined","ThemeProvider","children","_s","document","documentElement","classList","add","metaThemeColor","querySelector","setAttribute","Provider","value","isDarkMode","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTheme","_s2","context","Error","$RefreshReg$"],"sources":["D:/Portfolio Website/portfolio/src/context/ThemeContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect } from 'react';\r\n\r\ntype ThemeContextType = {\r\n  isDarkMode: boolean;\r\n};\r\n\r\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\r\n\r\nexport const ThemeProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  useEffect(() => {\r\n    // Always set dark mode\r\n    document.documentElement.classList.add('dark');\r\n    \r\n    // Update meta theme-color\r\n    const metaThemeColor = document.querySelector('meta[name=\"theme-color\"]');\r\n    if (metaThemeColor) {\r\n      metaThemeColor.setAttribute('content', '#1f2937');\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ isDarkMode: true }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useTheme = () => {\r\n  const context = useContext(ThemeContext);\r\n  if (context === undefined) {\r\n    throw new Error('useTheme must be used within a ThemeProvider');\r\n  }\r\n  return context;\r\n}; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAMpE,MAAMC,YAAY,gBAAGL,aAAa,CAA+BM,SAAS,CAAC;AAE3E,OAAO,MAAMC,aAAsD,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACtFP,SAAS,CAAC,MAAM;IACd;IACAQ,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,GAAG,CAAC,MAAM,CAAC;;IAE9C;IACA,MAAMC,cAAc,GAAGJ,QAAQ,CAACK,aAAa,CAAC,0BAA0B,CAAC;IACzE,IAAID,cAAc,EAAE;MAClBA,cAAc,CAACE,YAAY,CAAC,SAAS,EAAE,SAAS,CAAC;IACnD;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEZ,OAAA,CAACC,YAAY,CAACY,QAAQ;IAACC,KAAK,EAAE;MAAEC,UAAU,EAAE;IAAK,CAAE;IAAAX,QAAA,EAChDA;EAAQ;IAAAY,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAACd,EAAA,CAjBWF,aAAsD;AAAAiB,EAAA,GAAtDjB,aAAsD;AAmBnE,OAAO,MAAMkB,QAAQ,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC5B,MAAMC,OAAO,GAAG1B,UAAU,CAACI,YAAY,CAAC;EACxC,IAAIsB,OAAO,KAAKrB,SAAS,EAAE;IACzB,MAAM,IAAIsB,KAAK,CAAC,8CAA8C,CAAC;EACjE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,QAAQ;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}